input {

  file {
    type => "syslog"
    path => ["/var/log/auth.log", "/var/log/syslog"]
    exclude => ["*.gz", "shipper.log"]
    #debug => true
  }


  file {
    type => "apache"
    path => ["/var/log/apache2/error.log"]
    format => "json_event"
  }

  # This might work if postfix actually logged to these files.
  # Suspect that postfix is configured to send items to syslog.
  file {
    type => "postfix"
    path => ["/var/log/mail.*"]
  }


  file {
    type => "tomcat"
    path => ["/var/log/tomcat6/catalina.out"]
  }

}



filter {

    # Syslog section

    grok {
      type => "syslog"
      pattern => [ "%{SYSLOGBASE} Failed password for invalid user %{USERNAME:user} from %{IPORHOST:host} port %{POSINT:port} %{WORD:protocol}" ]
      add_tag => [ "ssh", "auth_failure", "grokked"  ]
    }

   # Postfix section

   grok {
       type => "postfix"
       patterns_dir => ["/etc/logstash/patterns"]
       pattern => ["%{POSTFIX}"]
       add_tag => [ "postfix", "grokked", "%{component}" ]
   }
   
   grok {
        tags => "qmgr"
        patterns_dir => ["/etc/logstash/patterns"]
        pattern => "%{POSTFIXQMGR}"
    }

    date {
      type => "postfix"
      match => [ "timestamp", "MMM dd HH:mm:ss" ]
      add_tag => [ "dated" ]
    }

    grep {
      type => "apache"
      drop => false
      add_tag => ["apache2"]
    }


    # Tomcat section

    grok {
      type => "tomcat"
      tags => "multiline"
      pattern => "%{JAVASTACKTRACEPART}"
    }

    grep {
      type => "tomcat"
      match => [ "@message", "(.+)" ]
      #drop => true
      add_tag => [ "grepped" ]
    }

    grep {
      type => "tomcat"
      drop => false
      add_tag => "%{@source_host}"    
    }
    
    multiline {
      type => "tomcat"
      pattern => "(^\d+\serror)|(^.+Exception: .+)|(^\s+at .+)|(^\s+... \d+ more)|(^\s*Caused by:.+)"
      what => "previous"
    }

    grep {
      type => "tomcat"
      tags => ["multiline"]
      add_field =>["stacktrace", "true"]
    }
    

}





output {

  stdout {
    debug => true
  }

  redis {
    #type => "apache"
    host => "smoker"
    data_type => "list"
    key => "logstash"
  }


 # email {
 #    type => "tomcat"
 #    # We literally name the match 'TomcatStackTrace.'
 #    # We then specify the field we are looking for and the value it
 #    # contain. In this case it must be true.
 #    match => [ "TomcatStackTrace", "stacktrace,true"]
 #    body => "Triggered in %{@message}"
 #    # In the subject of the email we send, we then can use the literal 
 #    # match name to help out in email filtering.
 #    subject => "This is a LogStash alert for '%{match-Name}'."
 #    from => "logstash.alert@example.com"
 #    to => "terryjbates@gmail.com"
 #    via => "sendmail"

 #  }



}

